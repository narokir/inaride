<h1>New map</h1>

<script src="http://maps.googleapis.com/maps/api/js?sensor=true&libraries=places" type="text/javascript"></script>


<%= render 'form' %>

<%= link_to 'Back', maps_path %>

      <input onclick="clearOverlays();" type=button value="Clear Overlays">
      <input onclick="showOverlays();" type=button value="Show All Overlays">
      <input onclick="deleteOverlays();" type=button value="Delete Overlays">
      <button id="drop" onclick="drop()">Drop Marker</button>

<%= gmaps({
    "map_options" => { "libraries" => ["places"],"type" => "ROADMAP", "center_longitude" => -71.0597732,"center_latitude" => 42.3584308, "zoom" => 8, "auto_adjust" => true},
    :markers => { :data => @json, :options => { :draggable => true,"custom_infowindow_class" => "yellow"  } },
	  })
    %>


<% content_for :scripts do %>
<script type="text/javascript" charset="utf-8">
  
var unitedStates = new google.maps.LatLng(42.3584308, -71.0597732);
var markersArray = [];


Gmaps.map.callback = function() {
  placeOrigin(unitedStates);
  // Add autocomplete to Origin and Destination
  var start = document.getElementById('map_origin');
  var end = document.getElementById('map_destination');
  var origin = new google.maps.places.Autocomplete(start);
  var destination = new google.maps.places.Autocomplete(end);
    
  //listen for place on Origin change and get new place location
  google.maps.event.addListener(origin, 'place_changed', function(event) {
  clearOverlays();
    // get the geolocation of new place input
    var place = origin.getPlace();
    alert('Origin changed. A new Marker will be placed at' + place.geometry.location);
    
  if (place.geometry.viewport) {
    Gmaps.map.serviceObject.fitBounds(place.geometry.viewport);
    }
    else
    {
    Gmaps.map.serviceObject.setCenter(place.geometry.location);
    //map.setZoom(2);  // Why 17? Because it looks good.
    };
  //set a new Marker
  placeOrigin(place.geometry.location);
  markersArray.push(marker);
  });
  
  //listen for place change on Destination and get new place location
  google.maps.event.addListener(destination, 'place_changed', function(event) {
  // get the geolocation of new place input
  var place = destination.getPlace();
  alert('Destination changed. A new Marker will be placed at' + place.geometry.location);
    
  if (place.geometry.viewport) {
    // Gmaps.map.serviceObject.setCenter(place.geometry.location);
    Gmaps.map.serviceObject.fitBounds(place.geometry.viewport);
    //Gmaps.map.serviceObject.setZoom(8);  // Why 17? Because it looks good.
    }
  //set a new Marker
  placeDestination(place.geometry.location);
  markersArray.push(marker);
  });
  
}

//Clear the markers
function clearOverlays() {
  if (markersArray) {
    for (var i = 0; i < markersArray.length; i++ ) {
      markersArray[i].setMap(null);
    }
  }
  markersArray.length = 0;
}

//Create a New marker for Origin
function placeOrigin(latLng) {
  var marker = new google.maps.Marker({
      position: latLng, 
      map: Gmaps.map.serviceObject,
      draggable: true,
      icon: "http://localhost:3000/assets/map_marker_green.png"
  });
  markersArray.push(marker);
  // Set and open infowindow
  var infowindow = new google.maps.InfoWindow({
      content: '<h3>Origin</h3><input onclick="clearOverlays();" class="btn btn-mini" type=button value="Clear Overlays">'
  });
  infowindow.open(Gmaps.map.serviceObject,marker);
}

//Create a New marker for Destination
function placeDestination(latLng) {
  var marker = new google.maps.Marker({
      position: latLng, 
      map: Gmaps.map.serviceObject,
      draggable: true,
      icon: "http://localhost:3000/assets/map_marker_red.png"
  });
  markersArray.push(marker);
  // Set and open infowindow
  var infowindow = new google.maps.InfoWindow({
      content: '<h3>Destination</h3><input onclick="clearOverlays();" class="btn btn-mini" type=button value="Clear">'
  });
  infowindow.open(Gmaps.map.serviceObject,marker);
}
</script>
<% end %>

  
<!--

  function initialize() {
    var defaultZoom = 12; // Why zoomed in? Because it looks good.
    var mapOptions = {
      center: new google.maps.LatLng(42.3584308, -71.0597732),
      zoom: defaultZoom,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    var map = new google.maps.Map(document.getElementById('map'),mapOptions);
    
    //  Centering the map in Boston
    var mylat = document.getElementById("map_latitude").value;
    var mylng = document.getElementById("map_longitude").value;
    
    if (jQuery.isEmptyObject(mylat)) {
	var mylat = '42.3584308';
	var mylng = '-71.0597732';
	var defaultZoom = 12; // decrease zoom to 13 if there is no selection from user.
    };
    
    
    // set center point of map to be of the Marker or the Default City
    var centrePoint = new google.maps.LatLng(mylat, mylng);
    
    map.setCenter(centrePoint);
    map.setZoom(defaultZoom);
    
    // Add autocomplete to Origin and Destination
    var origin = document.getElementById('map_origin');
    var autocomplete = new google.maps.places.Autocomplete(origin);
    var destination = document.getElementById('map_destination');
    var autocomplete = new google.maps.places.Autocomplete(destination);
    
    autocomplete.bindTo('bounds', map);
    
    var infowindow = new google.maps.InfoWindow();
    var marker = new google.maps.Marker({
      map: map
    });
    
    google.maps.event.addListener(autocomplete, 'place_changed', function() {
      infowindow.open(Gmaps.map.serviceObject,marker);
      var place = autocomplete.getPlace();
      
      if (place.geometry.viewport) {
	map.fitBounds(place.geometry.viewport);
	}
	else
	{
	  map.setCenter(place.geometry.location);
	  map.setZoom(17);  // Why 17? Because it looks good.
	};
    
    // add custom Marker Image
    var image = new google.maps.MarkerImage(
      "http://localhost:3000/assets/pin2.png",
      new google.maps.Size(20, 35),
      new google.maps.Point(0, 0),
      new google.maps.Point(17, 34),
      new google.maps.Size(20, 35));
	marker.setIcon(image);
	marker.setPosition(place.geometry.location);
    
      var address = '';
      if (place.address_components) {
	address = [
	  (place.address_components[0] && place.address_components[0].short_name || ''),
	  (place.address_components[1] && place.address_components[1].short_name || ''),
	  (place.address_components[2] && place.address_components[2].short_name || '')
	].join(' ');
      }
      infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
      infowindow.open(map, marker);
    });
  
    // add a draggable marker
    marker = new google.maps.Marker({
      map:map,
      draggable:true,
      animation: google.maps.Animation.DROP,
      position: centrePoint
      });
  
    var defaultImage = new google.maps.MarkerImage(
    "http://localhost:3000/assets/pin2.png",
    new google.maps.Size(20, 35),
    new google.maps.Point(0, 0),
    new google.maps.Point(17, 34),
    new google.maps.Size(20, 35));
    marker.setIcon(defaultImage); 
    google.maps.event.addListener(marker, 'click', toggleBounce);

    setupClickListener('changetype-all', []);
    setupClickListener('changetype-establishment', ['establishment']);
    setupClickListener('changetype-geocode', ['geocode']);
  }
 



-->


<!--


  var map;
  var markers = [];
  var unitedStates = new google.maps.LatLng(42.3584308, -71.0597732);
  

  
  var mapOptions = {
      zoom: 12,
      center: unitedStates,
      mapTypeId: google.maps.MapTypeId.ROADMAP	
  };
  
  map = new google.maps.Map(document.getElementById('map'),
  mapOptions);

  // Add autocomplete to Origin and Destination
  var origin = document.getElementById('map_origin');
  var destination = document.getElementById('map_destination');
  var org = new google.maps.places.Autocomplete(origin);
  var dest = new google.maps.places.Autocomplete(destination);
  
  org.bindTo('bounds', map);
  dest.bindTo('bounds', map);
  var infowindow = new google.maps.InfoWindow();
  

  // Add and set a marker	
  function addMarker(place,image) {
    marker = new google.maps.Marker({
      position: place,
      map: map,
      animation: google.maps.Animation.DROP
    });
    alert('You are about tot set a merker');
    
    // Push Marker to Aray. Why? Don't know yet.
    markers.push(marker);
     
  }
    // Define custom destinatino marker
    var destinationMarker = new google.maps.MarkerImage(
    "http://localhost:3000/assets/map_marker_red.png",
    new google.maps.Size(32, 41),
    new google.maps.Point(0, 0),
    new google.maps.Point(17, 34),
    new google.maps.Size(32, 41));
    
    // Define custom origin marker
    var originMarker = new google.maps.MarkerImage(
    "http://localhost:3000/assets/map_marker_green.png",
    new google.maps.Size(32, 41),
    new google.maps.Point(0, 0),
    new google.maps.Point(17, 34),
    new google.maps.Size(32, 41));

  // Add lister for Origin
  google.maps.event.addListener(org, 'place_changed', function(event) {
  
    var place = org.getPlace();
    
    if (place.geometry.location) {
     map.fitBounds(place.geometry.viewport);
    }
    else
    {
      map.setCenter(place.geometry.location);
      map.setZoom(12);
    };
    alert('Origin' + place.geometry.location);
    addMarker(place.geometry.location);
    
    //Render custom Marker for Origin
    marker.setIcon(originMarker);
    var infowindow = new google.maps.InfoWindow({
      content: '<div class="popup"><h2>Awesome!</h2><p>Drag me and adjust the zoom level.</p><button class="btn btn-large">Button</button>'
    });
    infowindow.open(map,marker);

  });
  
  // Add lister for Destination
  google.maps.event.addListener(dest, 'place_changed', function(event) {    
    var place = dest.getPlace();
    
    if (place.geometry.location) {
     map.fitBounds(place.geometry.viewport);
    }
    else
    {
      map.setCenter(place.geometry.location);
      map.setZoom(12);
    };
    alert('Destination' + place.geometry.location);
    addMarker(place.geometry.location);
    
    //Render custom Marker for Destinatin
    marker.setIcon(destinationMarker);
    infowindow.setContent(latLng);
    infowindow.open(Gmaps.map.serviceObject,marker);
  });
  
google.maps.event.addDomListener(window, 'load', initialize);


-->

